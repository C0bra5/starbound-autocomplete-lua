{
  "_args": [
    [
      {
        "raw": "luaparse@github:dapetcu21/luaparse",
        "scope": null,
        "escapedName": "luaparse",
        "name": "luaparse",
        "rawSpec": "github:dapetcu21/luaparse",
        "spec": "github:dapetcu21/luaparse",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:dapetcu21/luaparse.git",
          "sshUrl": "git+ssh://git@github.com/dapetcu21/luaparse.git",
          "httpsUrl": "git+https://github.com/dapetcu21/luaparse.git",
          "gitUrl": "git://github.com/dapetcu21/luaparse.git",
          "shortcut": "github:dapetcu21/luaparse",
          "directUrl": "https://raw.githubusercontent.com/dapetcu21/luaparse/master/package.json"
        }
      },
      "C:\\Users\\C0bra5\\AppData\\Local\\Temp\\d-117410-180-18g3yl1.w79oxq1tt9\\package.tgz"
    ]
  ],
  "_from": "dapetcu21/luaparse",
  "_id": "luaparse@0.2.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/starbound-autocomplete-lua/luaparse",
  "_phantomChildren": {},
  "_requested": {
    "raw": "luaparse@github:dapetcu21/luaparse",
    "scope": null,
    "escapedName": "luaparse",
    "name": "luaparse",
    "rawSpec": "github:dapetcu21/luaparse",
    "spec": "github:dapetcu21/luaparse",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:dapetcu21/luaparse.git",
      "sshUrl": "git+ssh://git@github.com/dapetcu21/luaparse.git",
      "httpsUrl": "git+https://github.com/dapetcu21/luaparse.git",
      "gitUrl": "git://github.com/dapetcu21/luaparse.git",
      "shortcut": "github:dapetcu21/luaparse",
      "directUrl": "https://raw.githubusercontent.com/dapetcu21/luaparse/master/package.json"
    }
  },
  "_requiredBy": [
    "/starbound-autocomplete-lua"
  ],
  "_resolved": "git://github.com/dapetcu21/luaparse.git#5a1fd2868adecb79f6bc57ee1f1880a3ea83ad8b",
  "_shasum": "5603db2bed4a46beabec0b0f24b12292be9ed90b",
  "_shrinkwrap": null,
  "_spec": "luaparse@github:dapetcu21/luaparse",
  "_where": "C:\\Users\\C0bra5\\AppData\\Local\\Temp\\d-117410-180-18g3yl1.w79oxq1tt9\\package.tgz",
  "author": {
    "name": "Oskar Schöldström",
    "email": "public@oxy.fi",
    "url": "http://www.oxy.fi/"
  },
  "bin": {
    "luaparse": "./bin/luaparse"
  },
  "bugs": {
    "url": "https://github.com/oxyc/luaparse/issues"
  },
  "dependencies": {},
  "description": "A Lua parser in JavaScript",
  "devDependencies": {
    "benchmark": "~1.0.0",
    "complexity-report": "~0.10.5",
    "docco": "~0.6.3",
    "gulp": "~3.8.10",
    "gulp-add-src": "^0.2.0",
    "gulp-filelog": "^0.4.1",
    "gulp-header": "^1.2.2",
    "gulp-jshint": "^1.9.0",
    "gulp-rename": "^1.2.0",
    "gulp-striphtml": "0.0.1",
    "gulp-uglify": "^1.0.1",
    "istanbul": "~0.3.2",
    "marked": "~0.3.2",
    "spec": "git://github.com/kitcambridge/spec.git#gh-pages",
    "testem": "~0.6.9"
  },
  "files": [
    "README.md",
    "LICENSE",
    "luaparse.js",
    "bin/luaparse"
  ],
  "gitHead": "5a1fd2868adecb79f6bc57ee1f1880a3ea83ad8b",
  "homepage": "https://oxyc.github.io/luaparse/",
  "keywords": [
    "ast",
    "lua",
    "parser",
    "parsing"
  ],
  "license": "MIT",
  "main": "luaparse.js",
  "man": [
    "./docs/luaparse.1"
  ],
  "name": "luaparse",
  "optionalDependencies": {},
  "readme": "# luaparse [![Build Status](https://travis-ci.org/oxyc/luaparse.svg)](https://travis-ci.org/oxyc/luaparse)\r\n\r\nA Lua parser written in JavaScript, for my bachelor's thesis at Arcada.\r\n\r\n## Installation\r\n\r\nInstall through `bower install luaparse` or `npm install luaparse`.\r\n\r\n## Usage\r\n\r\nCommonJS\r\n\r\n```js\r\nvar parser = require('luaparse');\r\nvar ast = parser.parse('i = 0');\r\nconsole.log(JSON.stringify(ast));\r\n```\r\n\r\nAMD\r\n\r\n```js\r\nrequire(['luaparse'], function(parser) {\r\n  var ast = parser.parse('i = 0');\r\n  console.log(JSON.stringify(ast));\r\n});\r\n```\r\n\r\nBrowser\r\n\r\n```html\r\n<script src=\"luaparse.js\"></script>\r\n<script>\r\nvar ast = luaparse.parse('i = 0');\r\nconsole.log(JSON.stringify(ast));\r\n</script>\r\n```\r\n\r\n## Parser Interface\r\n\r\nBasic usage:\r\n\r\n```js\r\nluaparse.parse(code, options);\r\n```\r\n\r\nThe output of the parser is an Abstract Syntax Tree (AST) formatted in JSON.\r\n\r\nThe available options are:\r\n\r\n- `wait: false` Explicitly tell the parser when the input ends.\r\n- `comments: true` Store comments as an array in the chunk object.\r\n- `scope: false` Track identifier scopes.\r\n- `locations: false` Store location information on each syntax node.\r\n- `ranges: false` Store the start and end character locations on each syntax\r\n  node.\r\n- `onCreateNode: null` A callback which will be invoked when a syntax node\r\n  has been completed. The node which has been created will be passed as the\r\n  only parameter.\r\n- `onCreateScope: null` A callback which will be invoked when a new scope is\r\n  created.\r\n- `onDestroyScope: null` A callback which will be invoked when the current\r\n  scope is destroyed.\r\n- `onScopeIdentifierName: null` A callback which will be invoked when a new identifier is added to the current scope. The identifier's name will be passed as the only parameter.\r\n- `luaVersion: '5.1'` The version of Lua the parser will target; supported\r\n  values are `'5.1'`, `'5.2'` and `'5.3'`.\r\n\r\nThe default options are also exposed through `luaparse.defaultOptions` where\r\nthey can be overriden globally.\r\n\r\nThere is a second interface which might be preferable when using the `wait`\r\noption.\r\n\r\n```js\r\nvar parser = luaparse.parse({ wait: true });\r\nparser.write('foo = \"');\r\nparser.write('bar');\r\nvar ast = parser.end('\"');\r\n```\r\n\r\nThis would be identical to:\r\n\r\n```js\r\nvar ast = luaparse.parse('foo = \"bar\"');\r\n```\r\n\r\n### AST format\r\n\r\nIf the following code is executed:\r\n\r\n```js\r\nluaparse.parse('foo = \"bar\"');\r\n```\r\n\r\nthen the returned value will be:\r\n\r\n```js\r\n{\r\n  \"type\": \"Chunk\",\r\n  \"body\": [\r\n    {\r\n      \"type\": \"AssignmentStatement\",\r\n      \"variables\": [\r\n        {\r\n          \"type\": \"Identifier\",\r\n          \"name\": \"foo\"\r\n        }\r\n      ],\r\n      \"init\": [\r\n        {\r\n          \"type\": \"StringLiteral\",\r\n          \"value\": \"bar\",\r\n          \"raw\": \"\\\"bar\\\"\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"comments\": []\r\n}\r\n```\r\n\r\n### Custom AST\r\n\r\nThe default AST structure is somewhat inspired by the Mozilla Parser API but\r\ncan easily be overriden to customize the structure or to inject custom logic.\r\n\r\n`luaparse.ast` is an object containing all functions used to create the AST, if\r\nyou for example wanted to trigger an event on node creations you could use the\r\nfollowing:\r\n\r\n```js\r\nvar luaparse = require('luaparse'),\r\n    events = new (require('events').EventEmitter);\r\n\r\nObject.keys(luaparse.ast).forEach(function(type) {\r\n  var original = luaparse.ast[type];\r\n  luaparse.ast[type] = function() {\r\n    var node = original.apply(null, arguments);\r\n    events.emit(node.type, node);\r\n    return node;\r\n  };\r\n});\r\nevents.on('Identifier', function(node) { console.log(node); });\r\nluaparse.parse('i = \"foo\"');\r\n```\r\n\r\n_this is only an example to illustrate what is possible and this particular\r\nexample might not suit your needs as the end location of the node has not been\r\ndetermined yet. If you desire events you should use the `onCreateNode` callback\r\ninstead)._\r\n\r\n\r\n### Lexer\r\n\r\nThe lexer used by luaparse can be used independently of the recursive descent\r\nparser. The lex function is exposed as `luaparse.lex()` and it will return the\r\nnext token up until `EOF` is reached.\r\n\r\nEach token consists of:\r\n\r\n- `type` expressed as an enum flag which can be matched with `luaparse.tokenTypes`.\r\n- `value`\r\n- `line`, `lineStart`\r\n- `range` can be used to slice out raw values, eg. `foo = \"bar\"` will return a\r\n`StringLiteral` token with the value `bar`. Slicing out the range on the other\r\nhand will return `\"bar\"`.\r\n\r\n```js\r\nvar parser = luaparse.parse('foo = \"bar\"', { wait: true });\r\nparser.lex(); // { type: 8, value: \"foo\", line: 1, lineStart: 0, range: [0, 3] }\r\nparser.lex(); // { type: 32, value: \"=\", line: 1, lineStart: 0, range: [4, 5]}\r\nparser.lex(); // { type: 2, value: \"bar\", line: 1, lineStart: 0, range: [6, 11] }\r\nparser.lex(); // { type: 1, value: \"<eof>\", line: 1, lineStart: 0, range: [11 11] }\r\nparser.lex(); // { type: 1, value: \"<eof>\", line: 1, lineStart: 0, range: [11 11] }\r\n```\r\n\r\n## Examples\r\n\r\nHave a look in the [examples directory](https://github.com/oxyc/luaparse/tree/master/examples)\r\nof the repository for some code examples or check them out [live](https://oxyc.github.io/luaparse/examples.html).\r\n\r\n## luaparse(1)\r\n\r\nThe `luaparse` executable can be used in your shell by installing `luaparse` globally using npm:\r\n\r\n```bash\r\n$ npm install -g luaparse\r\n$ luaparse --help\r\n\r\nUsage: luaparse [option]... [file|code]...\r\n\r\nOptions:\r\n  -c|--code [code]   parse code snippet\r\n  -f|--file [file]   parse from file\r\n  -b|--beautify      output an indenteted AST\r\n  --[no]-comments    store comments. defaults to true\r\n  --[no]-scope       store variable scope. defaults to false\r\n  --[no]-locations   store location data on syntax nodes. defaults to false\r\n  --[no]-ranges      store start and end character locations. defaults to false\r\n  -q|--quiet         suppress output\r\n  -h|--help\r\n  -v|--version\r\n  --verbose\r\n\r\nExamples:\r\n  luaparse --no-comments -c \"locale foo = \\\"bar\\\"\"\r\n  luaparse foo.lua bar.lua\r\n```\r\n\r\nExample usage\r\n\r\n```bash\r\n$ luaparse \"i = 0\"\r\n\r\n{\"type\":\"Chunk\",\"body\":[{\"type\":\"AssignmentStatement\",\"variables\":[{\"type\":\"Identifier\",\"name\":\"i\"}],\"init\":[{\"type\":\"NumericLiteral\",\"value\":0,\"raw\":\"0\"}]}],\"comments\":[]}\r\n```\r\n\r\n## Support\r\n\r\nHas been tested in at least IE6+, Firefox 3+, Safari 4+, Chrome 10+, Opera 10+,\r\nNode 0.4.0+, RingoJS 0.8-0.9, Narwhal 0.3.2, Rhino 1.7R4-1.7R5, Nashorn 1.8.0.\r\n\r\n## Quality Assurance\r\n\r\n_TL;DR simply run `make qa`. This will run all quality assurance scripts but\r\nassumes you have it set up correctly._\r\n\r\nBegin by cloning the repository and installing the development dependencies\r\nwith `npm install`. To test AMD loading for browsers you should run `bower\r\ninstall` which will download RequireJS.\r\n\r\nThe luaparse test suite uses [testem](https://github.com/airportyh/testem) as a\r\ntest runner, and because of this it's very easy to run the tests using\r\ndifferent javascript engines or even on locally installed browsers. Currently\r\nthe default runner uses [PhantomJS](http://phantomjs.org/) and node so when\r\nusing `make test` or `npm test` you should have PhantomJS installed.\r\n\r\n### Test runners\r\n\r\n- `make test` uses PhantomJS and node.\r\n- `make testem-engines` uses PhantomJS, node, narwhal, ringo, rhino and rhino\r\n1.7R5. This requires that you have the engines installed.\r\n- `make test-node` uses a custom command line reporter to make the output\r\neasier on the eyes while practicing TDD.\r\n- By installing `testem` globally you can also run the tests in a locally\r\ninstalled browser.\r\n\r\n### Other quality assurance measures\r\n\r\n- You can check the function complexity using [complexity-report](https://github.com/philbooth/complexityReport.js)\r\nusing `make complexity-analysis`\r\n- Running `make coverage` will generate the [coverage report](https://oxyc.github.io/luaparse/coverage.html).\r\nTo simply check that all code has coverage you can run `make coverage-analysis`.\r\n- `make lint`, `make benchmark`, `make profile`.\r\n\r\n### Documentation\r\n\r\nBy running `make docs` all [documentation](https://oxyc.github.io/luaparse/)\r\nwill be generated.\r\n\r\n## Projects using luaparse\r\n\r\n- [luamin](http://mths.be/luamin), a Lua minifier written by Mathias Bynens.\r\n- [Ace](https://github.com/ajaxorg/ace), an online code editor.\r\n\r\n## Acknowledgements\r\n\r\n* Initial tests are scaffolded from [yueliang][yueliang] and then manually checked for error.\r\n* Much of the code is based on [LuaMinify][luaminify], the [Lua][lua] source and [Esprima][esprima]. All awesome projects.\r\n\r\n## License\r\n\r\nMIT\r\n\r\n[luaminify]: https://github.com/stravant/LuaMinify\r\n[yueliang]: http://yueliang.luaforge.net/\r\n[lua]: http://www.lua.org\r\n[esprima]: http://esprima.org\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/oxyc/luaparse.git"
  },
  "scripts": {
    "test": "make qa"
  },
  "version": "0.2.1"
}
